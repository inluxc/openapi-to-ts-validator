// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`format-schema - compile based - options decoders should match 1`] = `
"/* eslint-disable */

import Ajv from \"ajv\";
import addFormats from \"ajv-formats\";
import type { Decoder } from \"./helpers\";
import { validateJson } from \"./validate\";
import type { User, Price } from \"./models\";
import jsonSchema from \"./schema.json\" assert { type: "json" };

export const ajv = new Ajv({ strict: false });
addFormats(ajv, { mode: \"fast\", formats: [\"date\", \"time\"] });
ajv.compile(jsonSchema);

// Decoders
export const UserDecoder: Decoder<User> = {
  definitionName: \"User\",
  schemaRef: \"#/definitions/User\",

  decode(json: unknown): User {
    const schema = ajv.getSchema(UserDecoder.schemaRef);
    if (!schema) {
      throw new Error(\`Schema \${UserDecoder.definitionName} not found\`);
    }
    return validateJson(json, schema, UserDecoder.definitionName);
  },
};
export const PriceDecoder: Decoder<Price> = {
  definitionName: \"Price\",
  schemaRef: \"#/definitions/Price\",

  decode(json: unknown): Price {
    const schema = ajv.getSchema(PriceDecoder.schemaRef);
    if (!schema) {
      throw new Error(\`Schema \${PriceDecoder.definitionName} not found\`);
    }
    return validateJson(json, schema, PriceDecoder.definitionName);
  },
};
"
`;

exports[`format-schema - compile based decoders should match 1`] = `
"/* eslint-disable */

import Ajv from \"ajv\";
import addFormats from \"ajv-formats\";
import type { Decoder } from \"./helpers\";
import { validateJson } from \"./validate\";
import type { User, Price } from \"./models\";
import jsonSchema from \"./schema.json\" assert { type: \"json\" };

export const ajv = new Ajv({ strict: false });
addFormats(ajv, undefined);
ajv.compile(jsonSchema);

// Decoders
export const UserDecoder: Decoder<User> = {
  definitionName: \"User\",
  schemaRef: \"#/definitions/User\",

  decode(json: unknown): User {
    const schema = ajv.getSchema(UserDecoder.schemaRef);
    if (!schema) {
      throw new Error(\`Schema \${UserDecoder.definitionName} not found\`);
    }
    return validateJson(json, schema, UserDecoder.definitionName);
  },
};
export const PriceDecoder: Decoder<Price> = {
  definitionName: \"Price\",
  schemaRef: \"#/definitions/Price\",

  decode(json: unknown): Price {
    const schema = ajv.getSchema(PriceDecoder.schemaRef);
    if (!schema) {
      throw new Error(\`Schema \${PriceDecoder.definitionName} not found\`);
    }
    return validateJson(json, schema, PriceDecoder.definitionName);
  },
};
"
`;

exports[`format-schema - compile based models should match 1`] = `
"/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface User {
  createdAt: string;
  email: string;
}
export interface Price {
  amount: number;
}
"
`;

exports[`format-schema - compile based schema should match 1`] = `
"{
  \"type\": \"object\",
  \"title\": \"Schema\",
  \"definitions\": {
    \"User\": {
      \"type\": \"object\",
      \"properties\": {
        \"createdAt\": {
          \"type\": \"string\",
          \"format\": \"date\",
          \"formatMinimum\": \"2016-02-06\",
          \"formatExclusiveMaximum\": \"2016-12-27\"
        },
        \"email\": {
          \"type\": \"string\",
          \"format\": \"email\"
        }
      },
      \"required\": [
        \"createdAt\",
        \"email\"
      ]
    },
    \"Price\": {
      \"type\": \"object\",
      \"properties\": {
        \"amount\": {
          \"type\": \"number\",
          \"minimum\": 0,
          \"maximum\": 999
        }
      },
      \"required\": [
        \"amount\"
      ]
    }
  },
  \"properties\": {
    \"User\": {
      \"$ref\": \"#/definitions/User\"
    },
    \"Price\": {
      \"$ref\": \"#/definitions/Price\"
    }
  }
}"
`;
