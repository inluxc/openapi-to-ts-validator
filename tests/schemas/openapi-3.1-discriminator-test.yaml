openapi: 3.1.0
info:
  title: OpenAPI 3.1 Discriminator Test Schema
  version: 1.0.0
paths: {}
components:
  schemas:
    # Basic discriminator with explicit mapping
    Pet:
      type: object
      discriminator:
        propertyName: petType
        mapping:
          cat: '#/components/schemas/Cat'
          dog: '#/components/schemas/Dog'
          bird: '#/components/schemas/Bird'
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
        - $ref: '#/components/schemas/Bird'
      required:
        - petType

    Cat:
      type: object
      properties:
        petType:
          type: string
          const: cat
        name:
          type: string
        meowVolume:
          type: number
        indoor:
          type: boolean
      required:
        - petType
        - name

    Dog:
      type: object
      properties:
        petType:
          type: string
          const: dog
        name:
          type: string
        barkVolume:
          type: number
        breed:
          type: string
      required:
        - petType
        - name

    Bird:
      type: object
      properties:
        petType:
          type: string
          const: bird
        name:
          type: string
        wingspan:
          type: number
        canFly:
          type: boolean
      required:
        - petType
        - name

    # Discriminator without explicit mapping (should be inferred)
    Vehicle:
      type: object
      discriminator:
        propertyName: vehicleType
      anyOf:
        - $ref: '#/components/schemas/Car'
        - $ref: '#/components/schemas/Motorcycle'
        - $ref: '#/components/schemas/Bicycle'
      required:
        - vehicleType

    Car:
      type: object
      properties:
        vehicleType:
          type: string
          const: Car
        make:
          type: string
        model:
          type: string
        doors:
          type: number
      required:
        - vehicleType
        - make
        - model

    Motorcycle:
      type: object
      properties:
        vehicleType:
          type: string
          const: Motorcycle
        make:
          type: string
        model:
          type: string
        engineSize:
          type: number
      required:
        - vehicleType
        - make
        - model

    Bicycle:
      type: object
      properties:
        vehicleType:
          type: string
          const: Bicycle
        brand:
          type: string
        gears:
          type: number
        isElectric:
          type: boolean
      required:
        - vehicleType
        - brand

    # Inheritance-style discriminator with allOf
    Shape:
      type: object
      discriminator:
        propertyName: shapeType
      properties:
        shapeType:
          type: string
        color:
          type: string
      required:
        - shapeType

    Circle:
      allOf:
        - $ref: '#/components/schemas/Shape'
        - type: object
          properties:
            shapeType:
              type: string
              const: circle
            radius:
              type: number
          required:
            - radius

    Rectangle:
      allOf:
        - $ref: '#/components/schemas/Shape'
        - type: object
          properties:
            shapeType:
              type: string
              const: rectangle
            width:
              type: number
            height:
              type: number
          required:
            - width
            - height

    # Nested discriminator scenario
    Container:
      type: object
      properties:
        id:
          type: string
        contents:
          type: array
          items:
            $ref: '#/components/schemas/Pet'
        primaryItem:
          $ref: '#/components/schemas/Vehicle'
      required:
        - id

    # Complex discriminator with mixed types
    Notification:
      type: object
      discriminator:
        propertyName: type
        mapping:
          email: '#/components/schemas/EmailNotification'
          sms: '#/components/schemas/SmsNotification'
          push: '#/components/schemas/PushNotification'
      oneOf:
        - $ref: '#/components/schemas/EmailNotification'
        - $ref: '#/components/schemas/SmsNotification'
        - $ref: '#/components/schemas/PushNotification'
      required:
        - type
        - timestamp

    EmailNotification:
      type: object
      properties:
        type:
          type: string
          const: email
        timestamp:
          type: string
          format: date-time
        recipient:
          type: string
          format: email
        subject:
          type: string
        body:
          type: string
        attachments:
          type: array
          items:
            type: string
      required:
        - type
        - timestamp
        - recipient
        - subject
        - body

    SmsNotification:
      type: object
      properties:
        type:
          type: string
          const: sms
        timestamp:
          type: string
          format: date-time
        phoneNumber:
          type: string
        message:
          type: string
        countryCode:
          type: string
      required:
        - type
        - timestamp
        - phoneNumber
        - message

    PushNotification:
      type: object
      properties:
        type:
          type: string
          const: push
        timestamp:
          type: string
          format: date-time
        deviceId:
          type: string
        title:
          type: string
        body:
          type: string
        badge:
          type: number
        sound:
          type: string
      required:
        - type
        - timestamp
        - deviceId
        - title
        - body